'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
const generateTestPDF = async (sectionTitle: string, score: number, totalQuestions: number, percentage: number, questions: any[], userAnswers: any[]) => {
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const element = document.createElement('div');
        element.style.width = '210mm'; // A4 width
        element.style.padding = '20px';
        element.style.backgroundColor = '#fefce8';
        element.style.fontFamily = 'Arial, sans-serif';

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const now = new Date();
        const dateStr = now.toLocaleDateString('ru-RU');
        const timeStr = now.toLocaleTimeString('ru-RU');

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è PDF
        element.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #d97706; padding-bottom: 20px;">
        <h1 style="color: #92400e; margin: 0 0 10px 0;">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h1>
        <h2 style="color: #b45309; margin: 0 0 15px 0;">${sectionTitle}</h2>
        <div style="display: flex; justify-content: center; gap: 30px; font-size: 16px;">
          <div>–î–∞—Ç–∞: ${dateStr}</div>
          <div>–í—Ä–µ–º—è: ${timeStr}</div>
        </div>
      </div>

      <div style="text-align: center; margin-bottom: 40px; background: #fef3c7; padding: 20px; border-radius: 10px;">
        <div style="font-size: 48px; margin-bottom: 10px;">
          ${percentage >= 80 ? 'üéâ' : percentage >= 60 ? 'üëç' : 'üìö'}
        </div>
        <div style="font-size: 24px; color: #92400e; margin-bottom: 10px;">
          –†–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –∏–∑ ${totalQuestions}
        </div>
        <div style="font-size: 20px; color: ${percentage >= 80 ? '#059669' :
            percentage >= 60 ? '#d97706' : '#dc2626'
        };">
          ${percentage}% - ${percentage >= 80 ? '–û—Ç–ª–∏—á–Ω–æ' :
            percentage >= 60 ? '–•–æ—Ä–æ—à–æ' : '–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'
        }
        </div>
      </div>

      <div style="margin-bottom: 40px;">
        <h3 style="color: #92400e; border-bottom: 1px solid #d97706; padding-bottom: 10px;">
          –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:
        </h3>
        ${questions.map((question, index) => {
            const userAnswer = userAnswers[index];
            const isCorrect = checkAnswer(question, userAnswer);

            const formatAnswer = (q: any, answer: any) => {
                switch (q.type) {
                    case 'single':
                        return q.options[answer as number] || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    case 'multiple':
                        return (answer as number[] || []).map((idx: number) => q.options[idx]).join(', ') || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    case 'text':
                        return answer as string || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    case 'matching':
                        return (answer as any[] || []).map((match: any) => `${match.leftId}‚Üí${match.rightId}`).join(', ') || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                    default:
                        return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
                }
            };

            const formatCorrect = (q: any) => {
                switch (q.type) {
                    case 'single':
                        return q.options[q.correctAnswer];
                    case 'multiple':
                        return q.correctAnswers.map((idx: number) => q.options[idx]).join(', ');
                    case 'text':
                        return q.correctAnswer;
                    case 'matching':
                        return q.correctMatches.map((match: any) => `${match.leftId}‚Üí${match.rightId}`).join(', ');
                    default:
                        return '';
                }
            };

            return `
            <div style="margin-bottom: 25px; padding: 15px; background: ${isCorrect ? '#f0fdf4' : '#fef2f2'}; border-radius: 8px; border-left: 4px solid ${isCorrect ? '#10b981' : '#ef4444'};">
              <div style="display: flex; align-items: start; margin-bottom: 10px;">
                <span style="color: ${isCorrect ? '#10b981' : '#ef4444'}; font-weight: bold; margin-right: 10px;">
                  ${isCorrect ? '‚úì' : '‚úó'} ${index + 1}.
                </span>
                <div style="flex: 1;">
                  <div style="font-weight: bold; margin-bottom: 8px; color: #1f2937;">
                    ${question.question}
                  </div>
                  <div style="font-size: 14px; color: #6b7280; margin-bottom: 5px;">
                    <strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> ${formatAnswer(question, userAnswer)}
                  </div>
                  ${!isCorrect ? `
                    <div style="font-size: 14px; color: #059669;">
                      <strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong> ${formatCorrect(question)}
                    </div>
                  ` : ''}
                </div>
              </div>
              <div style="font-size: 13px; color: #6b7280; background: white; padding: 10px; border-radius: 5px; border-left: 3px solid #d97706;">
                <strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> ${question.explanation}
              </div>
            </div>
          `;
        }).join('')}
      </div>


    `;

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
        document.body.appendChild(element);

        // –°–æ–∑–¥–∞–µ–º canvas –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
        const canvas = await html2canvas(element, {
            scale: 2, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#fefce8'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        document.body.removeChild(element);

        // –°–æ–∑–¥–∞–µ–º PDF
        const pdf = new jsPDF('p', 'mm', 'a4');
        const imgWidth = 210; // A4 width in mm
        const pageHeight = 295; // A4 height in mm
        const imgHeight = (canvas.height * imgWidth) / canvas.width;

        let heightLeft = imgHeight;
        let position = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pdf.addImage(canvas, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while (heightLeft >= 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(canvas, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        pdf.save(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ - ${sectionTitle} - ${dateStr}.pdf`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞');
    }
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
const checkAnswer = (question: Question, userAnswer: any): boolean => {
    switch (question.type) {
        case 'single':
            return userAnswer === (question as SingleChoiceQuestion).correctAnswer;
        case 'multiple':
            return JSON.stringify([...(userAnswer || [])].sort()) ===
                JSON.stringify([...(question as MultipleChoiceQuestion).correctAnswers].sort());
        case 'text':
            const textQuestion = question as TextAnswerQuestion;
            if (textQuestion.caseSensitive) {
                return (userAnswer || '').trim() === textQuestion.correctAnswer;
            }
            return (userAnswer || '').trim().toLowerCase() === textQuestion.correctAnswer.toLowerCase();
        case 'matching':
            return JSON.stringify([...(userAnswer || [])].sort((a: any, b: any) => a.leftId - b.leftId)) ===
                JSON.stringify([...(question as MatchingQuestion).correctMatches].sort((a: any, b: any) => a.leftId - b.leftId));
        default:
            return false;
    }
};

// Custom SVG icon components
const ArrowLeft = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="m12 19-7-7 7-7" />
        <path d="M19 12H5" />
    </svg>
);

const Book = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" />
    </svg>
);

const Brain = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z" />
        <path d="M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z" />
        <path d="M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4" />
        <path d="M17.599 6.5a3 3 0 0 0 .399-1.375" />
        <path d="M6.003 5.125A3 3 0 0 0 6.401 6.5" />
        <path d="M3.477 10.896a4 4 0 0 1 .585-.396" />
        <path d="M19.938 10.5a4 4 0 0 1 .585.396" />
        <path d="M6 18a4 4 0 0 1-1.967-.516" />
        <path d="M19.967 17.484A4 4 0 0 1 18 18" />
    </svg>
);

const CheckCircle = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
        <path d="m9 11 3 3L22 4" />
    </svg>
);

const XCircle = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <circle cx="12" cy="12" r="10" />
        <path d="m15 9-6 6" />
        <path d="m9 9 6 6" />
    </svg>
);

const RotateCcw = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
        <path d="M3 3v5h5" />
    </svg>
);

const BookOpen = ({ className }: { className?: string }) => (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="M2 3h6l4 4 4-4h6v18H2V3z" />
        <path d="M6 8v13" />
        <path d="M18 8v13" />
    </svg>
);


interface InlineImage {
    url: string;
    caption: string;
    alt: string;
}

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
interface BaseQuestion {
    id: string;
    question: string;
    explanation: string;
    type: 'single' | 'multiple' | 'text' | 'matching';
}

// –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
interface SingleChoiceQuestion extends BaseQuestion {
    type: 'single';
    options: string[];
    correctAnswer: number;
}

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
interface MultipleChoiceQuestion extends BaseQuestion {
    type: 'multiple';
    options: string[];
    correctAnswers: number[];
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
interface TextAnswerQuestion extends BaseQuestion {
    type: 'text';
    correctAnswer: string;
    caseSensitive?: boolean;
}

// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
interface MatchingQuestion extends BaseQuestion {
    type: 'matching';
    leftColumn: { id: number; text: string }[];
    rightColumn: { id: string; text: string }[];
    correctMatches: { leftId: number; rightId: string }[];
    leftTitle?: string;
    rightTitle?: string;
}

type Question = SingleChoiceQuestion | MultipleChoiceQuestion | TextAnswerQuestion | MatchingQuestion;

interface Quiz {
    questions: Question[];
}

interface GlossaryTerm {
    term: string;
    definition: string;
}

// –ù–û–í–´–ô: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–º—ã —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
interface Topic {
    id: string;
    title: string;
    image: string;
    contentFile: string; // –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
}


const TopicContent: React.FC<{ topic: Topic }> = ({ topic }) => {
    const { content, loading, error } = useTopicContent(topic.contentFile);

    if (loading) {
        return (
            <div className="flex justify-center items-center py-8">
                <div className="text-amber-700">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-red-100 border border-red-300 rounded-lg p-4 text-red-700">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {error}</p>
                <p className="text-sm mt-2">–§–∞–π–ª: {topic.contentFile}</p>
            </div>
        );
    }

    return <FormattedText content={content} />;
};



const useTopicContent = (contentFile: string | null) => {
    const [content, setContent] = useState<string>('');
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!contentFile) {
            setContent('');
            return;
        }

        const loadContent = async () => {
            setLoading(true);
            setError(null);

            try {
                // –î–ª—è Next.js –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∏–ª–∏ fetch
                const response = await fetch(contentFile);

                if (!response.ok) {
                    throw new Error(`Failed to load content: ${response.status}`);
                }

                const text = await response.text();
                setContent(text);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
                setContent(''); // –ò–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            } finally {
                setLoading(false);
            }
        };

        loadContent();
    }, [contentFile]);

    return { content, loading, error };
};

// –ù–û–í–´–ô: –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞ –∏–∑ JSON
const useQuiz = (quizFile: string | null) => {
    const [quiz, setQuiz] = useState<Quiz | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!quizFile) {
            setQuiz(null);
            return;
        }

        const loadQuiz = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(quizFile);
                if (!response.ok) {
                    throw new Error(`Failed to load quiz: ${response.status}`);
                }
                const data: Quiz = await response.json();
                setQuiz(data);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
                setQuiz(null);
            } finally {
                setLoading(false);
            }
        };

        loadQuiz();
    }, [quizFile]);

    return { quiz, loading, error };
};

// –ù–û–í–´–ô: –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è –∏–∑ JSON
const useGlossary = (glossaryFile: string | null) => {
    const [glossary, setGlossary] = useState<GlossaryTerm[] | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!glossaryFile) {
            setGlossary(null);
            return;
        }

        const loadGlossary = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(glossaryFile);
                if (!response.ok) {
                    throw new Error(`Failed to load glossary: ${response.status}`);
                }
                const data: { glossary: GlossaryTerm[] } = await response.json();
                setGlossary(data.glossary);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Unknown error');
                setGlossary(null);
            } finally {
                setLoading(false);
            }
        };

        loadGlossary();
    }, [glossaryFile]);

    return { glossary, loading, error };
};


interface Section {
    id: string;
    title: string;
    description: string;
    icon: string; // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ string –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    topics: Topic[];
    quizFile: string;
    glossaryFile: string;
}




const MarkdownImageComponent: React.FC<{
    src: string;
    alt?: string;
    caption?: string;
    className?: string;
    align?: 'left' | 'right' | 'center';
}> = ({ src, alt = "", caption = "", className = "", align = 'center' }) => {
    const [aspectRatio, setAspectRatio] = useState<number>(16 / 9);

    const handleImageLoad = (event: React.SyntheticEvent<HTMLImageElement>) => {
        const img = event.currentTarget;
        const width = img.naturalWidth;
        const height = img.naturalHeight;
        setAspectRatio(width / height);
    };

    // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    const alignmentClasses = {
        left: "float-left mr-4 mb-4 ml-0 max-w-[50%] md:max-w-[300px] w-full md:w-auto",
        right: "float-right ml-4 mb-4 mr-0 max-w-[50%] md:max-w-[300px] w-full md:w-auto",
        center: "mx-auto my-6 w-full"
    };

    // –î–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (align === 'center') {
        return (
            <div className={`${alignmentClasses[align]} ${className}`}>
                <div
                    className="relative w-full"
                    style={{ paddingBottom: `${100 / aspectRatio}%` }}
                >
                    <Image
                        src={src}
                        alt={alt}
                        fill
                        className="object-cover rounded-lg border-2 border-amber-300"
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw"
                        onLoad={handleImageLoad}
                    />
                </div>
                {caption && (
                    <div className="text-center text-lg text-black-700 mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>
        );
    }

    // –î–ª—è –ª–µ–≤–æ–≥–æ/–ø—Ä–∞–≤–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è - –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –¥–µ–ª–∞–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    return (
        <>
            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è */}
            <div className={`md:hidden mx-auto my-4 w-full max-w-md ${className}`}>
                <div
                    className="relative w-full"
                    style={{ paddingBottom: `${100 / aspectRatio}%` }}
                >
                    <Image
                        src={src}
                        alt={alt}
                        fill
                        className="object-cover rounded-lg border-2 border-amber-300"
                        sizes="(max-width: 768px) 100vw, 400px"
                        onLoad={handleImageLoad}
                    />
                </div>
                {caption && (
                    <div className="text-center text-lg text-black mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>

            {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å –æ–±—Ç–µ–∫–∞–Ω–∏–µ–º */}
            <div className={`hidden md:block ${alignmentClasses[align]} ${className}`}>
                <Image
                    src={src}
                    alt={alt}
                    width={300}
                    height={200}
                    className="rounded-lg border-2 border-amber-300 object-cover w-full"
                    sizes="(max-width: 768px) 100vw, 300px"
                    onLoad={handleImageLoad}
                />
                {caption && (
                    <div className="text-center text-lg text-black mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>
        </>
    );
};



const MarkdownVideoComponent: React.FC<{
    src: string;
    alt?: string;
    caption?: string;
    className?: string;
    align?: 'left' | 'right' | 'center';
}> = ({ src, alt = "", caption = "", className = "", align = 'center' }) => {
    const [aspectRatio, setAspectRatio] = useState<number>(16 / 9); // –°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –≤–∏–¥–µ–æ

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ video ID –∏–∑ URL Rutube
    const videoIdMatch = src.match(/\/video\/([a-zA-Z0-9]+)\/?/);
    const videoId = videoIdMatch ? videoIdMatch[1] : null;
    const embedSrc = videoId ? `https://rutube.ru/embed/${videoId}` : src; // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π src, –µ—Å–ª–∏ –Ω–µ Rutube

    // –ö–ª–∞—Å—Å—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    const alignmentClasses = {
        left: "float-left mr-4 mb-4 ml-0 max-w-[50%] md:max-w-[300px] w-full md:w-auto",
        right: "float-right ml-4 mb-4 mr-0 max-w-[50%] md:max-w-[300px] w-full md:w-auto",
        center: "mx-auto my-6 w-full"
    };

    if (align === 'center') {
        return (
            <div className={`${alignmentClasses[align]} ${className}`}>
                <div className="relative w-full" style={{ paddingBottom: `${100 / aspectRatio}%` }}>
                    <iframe
                        src={embedSrc}
                        title={alt.replace('video:', '')} // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è title
                        className="absolute top-0 left-0 w-full h-full rounded-lg border-2 border-amber-300"
                        allowFullScreen
                        loading="lazy"
                    />
                </div>
                {caption && (
                    <div className="text-center text-sm text-amber-700 mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>
        );
    }

    // –î–ª—è L/R ‚Äî –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
    return (
        <>
            {/* –ú–æ–±–∏–ª—å–Ω–∞—è */}
            <div className={`md:hidden mx-auto my-4 w-full max-w-md ${className}`}>
                <div className="relative w-full" style={{ paddingBottom: `${100 / aspectRatio}%` }}>
                    <iframe
                        src={embedSrc}
                        title={alt.replace('video:', '')}
                        className="absolute top-0 left-0 w-full h-full rounded-lg border-2 border-amber-300"
                        allowFullScreen
                        loading="lazy"
                    />
                </div>
                {caption && (
                    <div className="text-center text-lg text-black mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>

            {/* –î–µ—Å–∫—Ç–æ–ø */}
            <div className={`hidden md:block ${alignmentClasses[align]} ${className}`}>
                <div className="relative w-[300px]" style={{ paddingBottom: `${100 / aspectRatio * (300 / (16 / 9 * 300))}%` }}> {/* –§–∏–∫—Å —à–∏—Ä–∏–Ω—ã */}
                    <iframe
                        src={embedSrc}
                        title={alt.replace('video:', '')}
                        className="absolute top-0 left-0 w-full h-full rounded-lg border-2 border-amber-300"
                        allowFullScreen
                        loading="lazy"
                    />
                </div>
                {caption && (
                    <div className="text-center text-lg text-black mt-2 italic">
                        {caption}
                    </div>
                )}
            </div>
        </>
    );
};


const FormattedText: React.FC<{ content: string }> = ({ content }) => {
    const parseContent = (text: string) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: ![alt](src,align "caption")
        const imageRegex = /!\[(.*?)\]\((.*?)(?:,\s*([LR]))?(?:\s+"(.*?)")?\)/g;

        const parts = text.split(imageRegex);
        const result: React.ReactNode[] = [];

        for (let i = 0; i < parts.length; i++) {
            // –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: [–ø–æ–ª–Ω—ã–π_–º–∞—Ç—á, alt, src, align, caption]
            if (i % 5 === 0 && parts[i] !== undefined) {
                // –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                if (parts[i].trim()) {
                    result.push(parseTextWithFormatting(parts[i]));
                }

                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—Ç–∏)
                if (parts[i + 1] !== undefined && parts[i + 2] !== undefined) {
                    const alt = parts[i + 1];
                    const src = parts[i + 2];
                    const align = parts[i + 3] as 'L' | 'R' | undefined;
                    const caption = parts[i + 4] || "";

                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º L/R –≤ left/right
                    const alignment = align === 'L' ? 'left' : align === 'R' ? 'right' : 'center';

                    if (alt.startsWith('video:')) {
                        result.push(
                            <MarkdownVideoComponent
                                key={`video-${i}`}
                                src={src}
                                alt={alt}
                                caption={caption}
                                align={alignment}
                            />
                        );
                    } else {
                        result.push(
                            <MarkdownImageComponent
                                key={`img-${i}`}
                                src={src}
                                alt={alt}
                                caption={caption}
                                align={alignment}
                            />
                        );
                    }

                    i += 4;
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (result.length === 0 || typeof result[result.length - 1] === 'string') {
            const lastPart = parts[parts.length - 1];
            if (lastPart && lastPart.trim()) {
                result.push(parseTextWithFormatting(lastPart));
            }
        }

        return result;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const parseTextWithFormatting = (text: string) => {
        let formattedText = text
            // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç** –∏–ª–∏ __—Ç–µ–∫—Å—Ç__
            .replace(/\*\*(.*?)\*\*|__(.*?)__/g, '<strong>$1$2</strong>')
            // –ö—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç* –∏–ª–∏ _—Ç–µ–∫—Å—Ç_
            .replace(/\*(.*?)\*|_(.*?)_/g, '<em>$1$2</em>')
            // –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π: ~~—Ç–µ–∫—Å—Ç~~
            .replace(/~~(.*?)~~/g, '<u>$1</u>')
            // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π: --—Ç–µ–∫—Å—Ç--
            .replace(/--(.*?)--/g, '<s>$1</s>');

        return (
            <div
                key={`text-${Math.random()}`}
                className="whitespace-pre-line mb-4"
                dangerouslySetInnerHTML={{ __html: formattedText }}
            />
        );
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É floats –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    return (
        <div className="leading-relaxed">
            {parseContent(content)}
            <div className="clear-both"></div>
        </div>
    );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏





// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤

// –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
const SingleChoiceQuestionComponent: React.FC<{
    question: SingleChoiceQuestion;
    selectedAnswer: number | null;
    onAnswerSelect: (answer: number) => void;
}> = ({ question, selectedAnswer, onAnswerSelect }) => {
    return (
        <div className="space-y-3">
            {question.options.map((option, index) => (
                <button
                    key={index}
                    className={`w-full text-left p-4 rounded-md border transition-all ${selectedAnswer === index
                        ? 'border-amber-600 bg-amber-200 text-amber-900'
                        : 'border-amber-300 hover:border-amber-400 hover:bg-amber-200 text-amber-800'
                    }`}
                    onClick={() => onAnswerSelect(index)}
                >
                    <span className="font-semibold mr-3">
                        {String.fromCharCode(65 + index)}.
                    </span>
                    {option}
                </button>
            ))}
        </div>
    );
};

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
const MultipleChoiceQuestionComponent: React.FC<{
    question: MultipleChoiceQuestion;
    selectedAnswers: number[];
    onAnswerSelect: (answers: number[]) => void;
}> = ({ question, selectedAnswers, onAnswerSelect }) => {
    const toggleAnswer = (index: number) => {
        const newAnswers = selectedAnswers.includes(index)
            ? selectedAnswers.filter(i => i !== index)
            : [...selectedAnswers, index];
        onAnswerSelect(newAnswers);
    };

    return (
        <div className="space-y-3">
            {question.options.map((option, index) => (
                <button
                    key={index}
                    className={`w-full text-left p-4 rounded-md border transition-all ${selectedAnswers.includes(index)
                        ? 'border-amber-600 bg-amber-200 text-amber-900'
                        : 'border-amber-300 hover:border-amber-400 hover:bg-amber-200 text-amber-800'
                    }`}
                    onClick={() => toggleAnswer(index)}
                >
                    <span className="font-semibold mr-3">
                        {String.fromCharCode(65 + index)}.
                    </span>
                    {option}
                </button>
            ))}
        </div>
    );
};

// –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
const TextAnswerQuestionComponent: React.FC<{
    question: TextAnswerQuestion;
    answer: string;
    onAnswerChange: (answer: string) => void;
}> = ({ question, answer, onAnswerChange }) => {
    return (
        <div className="space-y-3">
            <input
                type="text"
                value={answer}
                onChange={(e) => onAnswerChange(e.target.value)}
                className="w-full p-4 border border-amber-300 rounded-md focus:border-amber-500 focus:ring-1 focus:ring-amber-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
            />
            {!question.caseSensitive && (
                <p className="text-sm text-amber-600">–†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è</p>
            )}
        </div>
    );
};

// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
const MatchingQuestionComponent: React.FC<{
    question: MatchingQuestion;
    matches: { leftId: number; rightId: string }[];
    onMatchesChange: (matches: { leftId: number; rightId: string }[]) => void;
}> = ({ question, matches, onMatchesChange }) => {
    const getMatchForLeft = (leftId: number) => {
        return matches.find(match => match.leftId === leftId)?.rightId || '';
    };

    const handleMatchChange = (leftId: number, rightId: string) => {
        const newMatches = matches.filter(match => match.leftId !== leftId);
        if (rightId) {
            newMatches.push({ leftId, rightId });
        }
        onMatchesChange(newMatches);
    };

    return (
        <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <div>
                    <h4 className="font-semibold text-amber-900 mb-2">
                        {question.leftTitle || '–õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü'}
                    </h4>
                    <div className="space-y-2">
                        {question.leftColumn.map((item) => (
                            <div key={item.id} className="p-3 bg-amber-100 rounded border border-amber-200">
                                {item.id}. {item.text}
                            </div>
                        ))}
                    </div>
                </div>

                <div>
                    <h4 className="font-semibold text-amber-900 mb-2">
                        {question.rightTitle || '–ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü'}
                    </h4>
                    <div className="space-y-2">
                        {question.rightColumn.map((item) => (
                            <div key={item.id} className="p-3 bg-amber-100 rounded border border-amber-200">
                                {item.id}. {item.text}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div className="space-y-3">
                <h4 className="font-semibold text-amber-900">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:</h4>
                {question.leftColumn.map((leftItem) => (
                    <div key={leftItem.id} className="flex items-center gap-3">
                        <span className="font-medium w-8">{leftItem.id}.</span>
                        <span className="flex-1">{leftItem.text}</span>
                        <select
                            value={getMatchForLeft(leftItem.id)}
                            onChange={(e) => handleMatchChange(leftItem.id, e.target.value)}
                            className="p-2 border border-amber-300 rounded"
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                            {question.rightColumn.map((rightItem) => (
                                <option key={rightItem.id} value={rightItem.id}>
                                    {rightItem.id}
                                </option>
                            ))}
                        </select>
                    </div>
                ))}
            </div>

            <div className="text-sm text-amber-600">
                –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {question.leftColumn.map(item => item.id).join('')} ‚Üí {question.rightColumn.map(item => item.id).join('')}
            </div>
        </div>
    );
};

const sections: Section[] = [
    {
        id: 'ancient',
        title: '–ö—É–±–∞–Ω—å –≤ –¥—Ä–µ–≤–Ω–æ—Å—Ç–∏',
        description: '–ò—Å—Ç–æ—Ä–∏—è –ö—É–±–∞–Ω–∏ –æ—Ç –∫–∞–º–µ–Ω–Ω–æ–≥–æ –≤–µ–∫–∞ –¥–æ –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏',
        icon: '/images/pot.svg',
        quizFile: '/1/1quiz.json',
        glossaryFile: '/1/1glossary.json',
        topics: [
            {
                id: 'kubanKamen',
                title: '–ö—É–±–∞–Ω—å –≤ –∫–∞–º–µ–Ω–Ω–æ–º –≤–µ–∫–µ',
                image: '/1/1/7.jpg',
                contentFile: '/1/1/1.1text.md'
            },
            {
                id: 'bronzeCulture',
                title: '–ö—É–ª—å—Ç—É—Ä—ã —ç–ø–æ—Ö–∏ –±—Ä–æ–Ω–∑—ã',
                image: '/1/2/8.jpg',
                contentFile: '/1/2/1.2text.md'
            },
            {
                id: '1.3',
                title: '–ù–∞—Å–µ–ª–µ–Ω–∏–µ –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω–æ–≥–æ –ö–∞–≤–∫–∞–∑–∞ –≤ –∂–µ–ª–µ–∑–Ω–æ–º –≤–µ–∫–µ',
                image: '/1/4/szkpreview.jpg',
                contentFile: '/1/3/1.3text.md'
            },
            {
                id: '1.4',
                title: '–ì—Ä–µ—á–µ—Å–∫–∞—è –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω–æ–≥–æ –ö–∞–≤–∫–∞–∑–∞',
                image: '/1/4/4.jpg',
                contentFile: '/1/4/1.4text.md'
            },
        ]
    },
    {
        id: 'kuban_middle_age',
        title: '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–≤–∫–∞–∑ –≤ —ç–ø–æ—Ö—É —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è',
        description: '–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ',
        icon: '/images/swords.svg',
        quizFile: '/2/2quiz.json',
        glossaryFile: '/2/2glossary.json',
        topics: [
            {
                id: 'topic1',
                title: '–ö—É–±–∞–Ω—å –≤ –ø–µ—Ä–∏–æ–¥ –¥–æ–º–æ–Ω–≥–æ–ª—å—Å–∫–æ–≥–æ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è',
                image: '/2/1/5.jpg',
                contentFile: '/2/1/2.1text.md'
            },
            {
                id: 'topic2',
                title: '–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ  –Ω–∞—à–µ—Å—Ç–≤–∏–µ –≤ –•III-–•V –≤–≤.',
                image: '/2/2/2.jpg',
                contentFile: '/2/2/2.2text.md'
            }
            ,
            {
                id: 'topic3',
                title: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ. –ì–µ–Ω—É—ç–∑—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∏–∏ –≤ –•III-–•V –≤–≤.',
                image: '/2/3/4.jpg',
                contentFile: '/2/3/2.3text.md'
            }
            ,
            {
                id: 'topic4',
                title: '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–≤–∫–∞–∑ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –•V - –•VII –≤–≤.',
                image: '/2/4/3.jpg',
                contentFile: '/2/4/2.4text.md'
            }
            ,
            {
                id: 'topic5',
                title: '–ü–µ—Ä–≤—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø–æ—Å–µ–ª–µ–Ω—Ü—ã –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/2/5/5.jpg',
                contentFile: '/2/5/2.5text.md'
            }

        ]
    },
    {
        id: 'kuban18-19',
        title: '–ö—É–±–∞–Ω—å –≤ –•VIII -  –•I–• –≤–≤.',
        description: '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ö—É–±–∞–Ω–∏',
        icon: '/images/crown.svg',
        quizFile: '/3/3quiz.json',
        glossaryFile: '/3/3glossary.json',
        topics: [
            {
                id: 'topic1',
                title: '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Ä–∞—Å—Å–µ–ª–µ–Ω–∏—è –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ-–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞–¥—ã–≥–æ–≤ –≤ –•VIII - —Å–µ—Ä–µ–¥–∏–Ω–µ –•I–• –≤–≤.',
                image: '/3/1/5.jpg',
                contentFile: '/3/1/3.1text.md'
            },
            {
                id: 'topic2',
                title: '–í–æ–µ–Ω–Ω–æ-–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –Ω–∞ –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω–æ–º –ö–∞–≤–∫–∞–∑–µ –≤ –•VIII –≤–µ–∫–µ',
                image: '/3/2/szk18.jpg',
                contentFile: '/3/2/3.2text.md'
            }
            ,
            {
                id: 'topic3',
                title: '–ü–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–∏—Ö –∏ –¥–æ–Ω—Å–∫–∏—Ö –∫–∞–∑–∞–∫–æ–≤ –Ω–∞ –ö—É–±–∞–Ω—å',
                image: '/3/2/migration.jpg',
                contentFile: '/3/3/3.3text.md'
            }
            ,
            {
                id: 'topic4',
                title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω–æ–≥–æ –ö–∞–≤–∫–∞–∑–∞ –∫ –†–æ—Å—Å–∏–∏',
                image: '/3/4/11.jpg',
                contentFile: '/3/4/3.4text.md'
            }
            ,
            {
                id: 'topic5',
                title: '–í–æ–µ–Ω–Ω–æ-–∫–∞–∑–∞—á—å—è –∏ –Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –ö—É–±–∞–Ω–∏',
                image: '/3/5/1.jpg',
                contentFile: '/3/5/3.5text.md'
            }
            ,
            {
                id: 'topic6',
                title: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –ö—É–±–∞–Ω–∏',
                image: '/3/6/4.jpg',
                contentFile: '/3/6/3.6text.md'
            }
            ,
            {
                id: 'topic7',
                title: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ö—É–±–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ö—É–±–∞–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—á—å–µ–≥–æ –≤–æ–π—Å–∫–∞. –í–æ–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ –∫–∞–∑–∞–∫–æ–≤.',
                image: '/3/7/2.jpg',
                contentFile: '/3/7/3.7text.md'
            }
            ,
            {
                id: 'topic8',
                title: '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ö—É–±–∞–Ω–∏ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –•I–• –≤.',
                image: '/3/8/4.jpg',
                contentFile: '/3/8/3.8text.md'
            }
            ,
            {
                id: 'topic9',
                title: '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –±—ã—Ç –∫–∞–∑–∞—á–µ—Å—Ç–≤–∞ –∏ –∞–¥—ã–≥–æ–≤',
                image: '/3/9/3.jpg',
                contentFile: '/3/9/3.9text.md'
            }
        ]
    },
    {
        id: 'kuban20-21',
        title: '–ö—É–±–∞–Ω—å –≤ –≥–æ–¥—ã –∑–∞—Ä–æ–∂–¥–µ–Ω–∏—è –°–°–°–†',
        description: '–í–ª–∏—è–Ω–∏–µ –∏–º–ø–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–π–Ω,  —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–π –∏ —Å–æ—Ü–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ö—É–±–∞–Ω—å',
        icon: '/images/hammer.svg',
        quizFile: '/4/4quiz.json',
        glossaryFile: '/4/4glossary.json',
        topics: [
            {
                id: 'topic1',
                title: '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ö—É–±–∞–Ω–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –µ–µ —Ä–∞–∑–≤–∏—Ç–∏—è',
                image: '/4/1/3.jpg',
                contentFile: '/4/1/4.1text.md'
            },
            {
                id: 'topic2',
                title: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å —Ä–µ–≥–∏–æ–Ω–∞ –≤ –≥–æ–¥—ã –ü–µ—Ä–≤–æ–π —Ä—É—Å—Å–∫–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏ 1905-1907 –≥–≥',
                image: '/4/2/3.jpg',
                contentFile: '/4/2/4.2text.md'
            }
            ,
            {
                id: 'topic3',
                title: '–ö—É–±–∞–Ω—Ü—ã –≤ –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ',
                image: '/4/3/4.jpg',
                contentFile: '/4/3/4.3text.md'
            }
            ,
            {
                id: 'topic4',
                title: '–†–µ–∑–æ–Ω–∞–Ω—Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π 1917 –≥. –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/4/4/4.jpg',
                contentFile: '/4/4/4.4text.md'
            }
            ,
            {
                id: 'topic5',
                title: '–ö—É–±–∞–Ω—å –≤ –ø–ª–∞–º–µ–Ω–∏ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –≤–æ–π–Ω—ã',
                image: '/4/5/prev.jpg',
                contentFile: '/4/5/4.5text.md'
            }
            ,
            {
                id: 'topic6',
                title: '–ù–≠–ü –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/4/6/3.jpg',
                contentFile: '/4/6/4.6text.md'
            }
            ,
            {
                id: 'topic7',
                title: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/4/7/8.jpg',
                contentFile: '/4/7/4.7text.md'
            }

        ]
    },
    {
        id: 'kuban_in_war',
        title: '–ö—É–±–∞–Ω—å –≤ –≥–æ–¥—ã –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã',
        description: '–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É–±–∞–Ω–∏',
        icon: '/images/star.svg',
        quizFile: '/5/5quiz.json',
        glossaryFile: '/5/5glossary.json',
        topics: [
            {
                id: 'topic1',
                title: '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞',
                image: '/5/1/2.jpg',
                contentFile: '/5/1/5.1text.md'
            },
            {
                id: 'topic2',
                title: '–ë–∏—Ç–≤–∞ –∑–∞ –ö–∞–≤–∫–∞–∑. –û–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                image: '/5/2/4.jpg',
                contentFile: '/5/2/5.2text.md'
            }
            ,
            {
                id: 'topic3',
                title: '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ –æ–∫–∫—É–ø–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/5/3/3.jpg',
                contentFile: '/5/3/5.3text.md'
            }
            ,
            {
                id: 'topic4',
                title: '–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–æ–µ –∏ –ø–æ–¥–ø–æ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –ö—É–±–∞–Ω–∏',
                image: '/5/4/3.jpg',
                contentFile: '/5/4/5.4text.md'
            }
            ,
            {
                id: 'topic5',
                title: '–ù–∞—Å—Ç—É–ø–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–∏—Ç–≤—ã –∑–∞ –ö–∞–≤–∫–∞–∑. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ö—É–±–∞–Ω–∏',
                image: '/5/5/6.jpg',
                contentFile: '/5/5/5.5text.md'
            }
            ,
            {
                id: 'topic6',
                title: '–í–æ–∑–¥—É—à–Ω—ã–µ –±–æ–∏ –Ω–∞–¥ –ö—É–±–∞–Ω—å—é',
                image: '/5/6/2.jpg',
                contentFile: '/5/6/5.6text.md'
            }
            ,
            {
                id: 'topic7',
                title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –≤ 1945-1950 –≥–≥.',
                image: '/5/7/4.jpg',
                contentFile: '/5/7/5.7text.md'
            }
        ]
    },
];

export default function Home() {
    const [currentSection, setCurrentSection] = useState<Section | null>(null);
    const [currentTopic, setCurrentTopic] = useState<Topic | null>(null);
    const [isQuizMode, setIsQuizMode] = useState(false);
    const [isGlossaryMode, setIsGlossaryMode] = useState(false);
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const [userAnswers, setUserAnswers] = useState<any[]>([]);
    const [selectedAnswer, setSelectedAnswer] = useState<any>(null);
    const [showResult, setShowResult] = useState(false);
    const [quizCompleted, setQuizCompleted] = useState(false);

    // ‚úÖ –í–´–ù–û–°–ò–ú –•–£–ö–ò –ù–ê–í–ï–†–•!
    // –•—É–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞, –∞ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    const { quiz, loading: quizLoading, error: quizError } = useQuiz(
        currentSection && isQuizMode ? currentSection.quizFile : null
    );
    const { glossary, loading: glossaryLoading, error: glossaryError } = useGlossary(
        currentSection && isGlossaryMode ? currentSection.glossaryFile : null
    );


    // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const goToHome = () => {
        setCurrentSection(null);
        setCurrentTopic(null);
        setIsQuizMode(false);
        setIsGlossaryMode(false);
        resetQuiz();
    };

    const goToSection = () => {
        setCurrentTopic(null);
        setIsQuizMode(false);
        setIsGlossaryMode(false);
        resetQuiz();
    };

    const startQuiz = () => {
        setIsQuizMode(true);
        setIsGlossaryMode(false);
        resetQuiz();
    };

    const showGlossary = () => {
        setIsGlossaryMode(true);
        setIsQuizMode(false);
        resetQuiz();
    };

    const resetQuiz = () => {
        setCurrentQuestion(0);
        setUserAnswers([]);
        setSelectedAnswer(null);
        setShowResult(false);
        setQuizCompleted(false);
    };

    const handleAnswerSelect = (answer: any) => {
        setSelectedAnswer(answer);
    };

    // –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–º –∫–≤–∏–∑–æ–º
    const nextQuestion = (quiz: Quiz | null) => {
        if (selectedAnswer !== null && selectedAnswer !== undefined && selectedAnswer !== '' && quiz) {
            const newAnswers = [...userAnswers, selectedAnswer];
            setUserAnswers(newAnswers);

            if (currentQuestion < quiz.questions.length - 1) {
                setCurrentQuestion(currentQuestion + 1);
                setSelectedAnswer(getInitialAnswerState(quiz.questions[currentQuestion + 1]));
            } else {
                setQuizCompleted(true);
                setShowResult(true);
            }
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    const getInitialAnswerState = (question: Question) => {
        switch (question.type) {
            case 'single':
                return null;
            case 'multiple':
                return [];
            case 'text':
                return '';
            case 'matching':
                return [];
            default:
                return null;
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const checkAnswer = (question: Question, userAnswer: any): boolean => {
        switch (question.type) {
            case 'single':
                return userAnswer === question.correctAnswer;
            case 'multiple':
                return JSON.stringify([...userAnswer].sort()) === JSON.stringify([...question.correctAnswers].sort());
            case 'text':
                if (question.caseSensitive) {
                    return userAnswer.trim() === question.correctAnswer;
                }
                return userAnswer.trim().toLowerCase() === question.correctAnswer.toLowerCase();
            case 'matching':
                return JSON.stringify([...userAnswer].sort((a, b) => a.leftId - b.leftId)) ===
                    JSON.stringify([...question.correctMatches].sort((a, b) => a.leftId - b.leftId));
            default:
                return false;
        }
    };

    const restartQuiz = () => {
        resetQuiz();
    };

    const exitQuiz = () => {
        setIsQuizMode(false);
        resetQuiz();
    };

    const exitGlossary = () => {
        setIsGlossaryMode(false);
    };

    const calculateScore = (quiz: Quiz | null) => {
        if (!quiz) return 0;
        let correct = 0;
        userAnswers.forEach((answer, index) => {
            if (checkAnswer(quiz.questions[index], answer)) {
                correct++;
            }
        });
        return correct;
    };


    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if (currentSection && isQuizMode) {
        // ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤–µ—Ä—Ö—É
        if (quizLoading) {
            return <div className="min-h-screen bg-amber-50 flex justify-center items-center"><div className="text-amber-700">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞...</div></div>;
        }

        if (quizError || !quiz) {
            return (
                <div className="min-h-screen bg-amber-50 flex justify-center items-center">
                    <div className="bg-red-100 border border-red-300 rounded-lg p-6 text-red-700 max-w-md text-center">
                        <h2 className="text-xl font-bold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞</h2>
                        <p>{quizError || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞.'}</p>
                        <p className="text-sm mt-2">–§–∞–π–ª: {currentSection.quizFile}</p>
                        <button onClick={exitQuiz} className="mt-4 px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700">
                            –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É
                        </button>
                    </div>
                </div>
            );
        }

        const questions = quiz.questions;

        const currentQ = questions[currentQuestion];
        const progress = ((currentQuestion + 1) / questions.length) * 100;

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        const formatUserAnswer = (question: Question, answer: any): string => {
            switch (question.type) {
                case 'single':
                    return question.options[answer as number];
                case 'multiple':
                    return (answer as number[]).map(idx => question.options[idx]).join(', ');
                case 'text':
                    return answer as string;
                case 'matching':
                    return (answer as any[]).map(match => `${match.leftId}‚Üí${match.rightId}`).join(', ');
                default:
                    return '';
            }
        };

        const formatCorrectAnswer = (question: Question): string => {
            switch (question.type) {
                case 'single':
                    return question.options[(question as SingleChoiceQuestion).correctAnswer];
                case 'multiple':
                    return (question as MultipleChoiceQuestion).correctAnswers.map(idx => question.options[idx]).join(', ');
                case 'text':
                    return (question as TextAnswerQuestion).correctAnswer;
                case 'matching':
                    return (question as MatchingQuestion).correctMatches.map(match => `${match.leftId}‚Üí${match.rightId}`).join(', ');
                default:
                    return '';
            }
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        const isAnswerReady = () => {
            if (selectedAnswer === null || selectedAnswer === undefined) return false;
            if (currentQ.type === 'multiple' && selectedAnswer.length === 0) return false;
            if (currentQ.type === 'text' && selectedAnswer.trim() === '') return false;
            if (currentQ.type === 'matching' && selectedAnswer.length !== currentQ.leftColumn.length) return false;
            return true;
        };

        if (showResult) {
            const score = calculateScore(quiz);
            const percentage = Math.round((score / questions.length) * 100);

            return (
                <div className="min-h-screen bg-amber-50">
                    <div className="container mx-auto px-4 py-8 max-w-4xl">
                        <div className="mb-6">
                            <button
                                onClick={exitQuiz}
                                className="mb-4 flex items-center text-amber-800 hover:text-amber-900"
                            >
                                <ArrowLeft className="w-4 h-4 mr-2" />
                                –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É
                            </button>
                        </div>

                        <div className="border border-amber-200 rounded-lg p-6 bg-amber-100 text-center">
                            <div className="flex items-center justify-center gap-3 mb-4">
                                <div className="p-3 bg-amber-200 rounded-lg">
                                    {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                                    <Image
                                        src={currentSection.icon}
                                        alt={`${currentSection.title} icon`}
                                        width={32}
                                        height={32}
                                    />
                                </div>
                                <div>
                                    <h2 className="text-2xl font-bold text-amber-900">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
                                    <p className="text-amber-700">–†–∞–∑–¥–µ–ª: {currentSection.title}</p>
                                </div>
                            </div>

                            <div className="text-6xl mb-4">
                                {percentage >= 80 ? 'üéâ' : percentage >= 60 ? 'üëç' : 'üìö'}
                            </div>

                            <div className="space-y-2">
                                <p className="text-amber-800">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</p>
                                <div className="flex items-center justify-center gap-2">
                                    <span className="text-3xl font-semibold text-amber-900">{score}</span>
                                    <span className="text-amber-700">–∏–∑ {questions.length}</span>
                                    <span className={`px-2 py-1 rounded-full text-sm ${percentage >= 80 ? 'bg-green-200 text-green-800' :
                                        percentage >= 60 ? 'bg-yellow-200 text-yellow-800' :
                                            'bg-red-200 text-red-800'
                                    }`}>
                                        {percentage}%
                                    </span>
                                </div>
                            </div>

                            <p className="text-amber-700 mt-4">
                                {percentage >= 80
                                    ? '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥.'
                                    : percentage >= 60
                                        ? '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.'
                                        : '–°—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.'
                                }
                            </p>

                            <div className="space-y-3 mt-6">
                                {questions.map((question, index) => {
                                    const userAnswer = userAnswers[index];
                                    const isCorrect = checkAnswer(question, userAnswer);

                                    return (
                                        <div key={question.id} className="text-left p-4 border border-amber-200 rounded-lg bg-amber-50">
                                            <div className="flex items-start gap-3 mb-2">
                                                {isCorrect ? (
                                                    <CheckCircle className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" />
                                                ) : (
                                                    <XCircle className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" />
                                                )}
                                                <div className="flex-1">
                                                    <p className="mb-2 font-medium text-amber-900">{question.question}</p>
                                                    <p className="text-sm text-amber-700">
                                                        –í–∞—à –æ—Ç–≤–µ—Ç: {formatUserAnswer(question, userAnswer)}
                                                    </p>
                                                    {!isCorrect && (
                                                        <p className="text-sm text-green-700 mt-1">
                                                            –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {formatCorrectAnswer(question)}
                                                        </p>
                                                    )}
                                                    <p className="text-sm text-amber-600 mt-2">
                                                        {question.explanation}
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                            <div className="flex gap-3 justify-center pt-6">
                                <button
                                    onClick={restartQuiz}
                                    className="px-4 py-2 border border-amber-300 text-amber-800 rounded-md hover:bg-amber-200 flex items-center transition-colors"
                                >
                                    <RotateCcw className="w-4 h-4 mr-2" />
                                    –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑
                                </button>
                                <button
                                    onClick={() => generateTestPDF(
                                        currentSection.title,
                                        score,
                                        questions.length,
                                        percentage,
                                        questions,
                                        userAnswers
                                    )}
                                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 flex items-center transition-colors"
                                >
                                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF
                                </button>
                                <button
                                    onClick={exitQuiz}
                                    className="px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700 transition-colors"
                                >
                                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }



        return (
            <div className="min-h-screen bg-amber-50">
                <div className="container mx-auto px-4 py-8 max-w-4xl">
                    <div className="mb-6">
                        <button
                            onClick={exitQuiz}
                            className="mb-4 flex items-center text-amber-800 hover:text-amber-900"
                        >
                            <ArrowLeft className="w-4 h-4 mr-2" />
                            –í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Å—Ç–∞
                        </button>

                        <div className="space-y-3">
                            <div className="flex items-center justify-between">
                                <h2 className="text-xl font-semibold text-amber-900">–¢–µ—Å—Ç: {currentSection.title}</h2>
                                <span className="px-2 py-1 bg-amber-200 text-amber-800 rounded-md text-sm">
                                    {currentQuestion + 1} –∏–∑ {questions.length}
                                </span>
                            </div>
                            <div className="w-full bg-amber-200 rounded-full h-2">
                                <div
                                    className="bg-amber-600 h-2 rounded-full transition-all duration-300"
                                    style={{ width: `${progress}%` }}
                                ></div>
                            </div>
                        </div>
                    </div>

                    <div className="border border-amber-200 rounded-lg p-6 bg-amber-100">
                        <h3 className="text-xl font-semibold mb-6 text-amber-900">{currentQ.question}</h3>

                        {/* –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ */}
                        {currentQ.type === 'single' && (
                            <SingleChoiceQuestionComponent
                                question={currentQ}
                                selectedAnswer={selectedAnswer}
                                onAnswerSelect={handleAnswerSelect}
                            />
                        )}

                        {currentQ.type === 'multiple' && (
                            <MultipleChoiceQuestionComponent
                                question={currentQ}
                                selectedAnswers={selectedAnswer}
                                onAnswerSelect={handleAnswerSelect}
                            />
                        )}

                        {currentQ.type === 'text' && (
                            <TextAnswerQuestionComponent
                                question={currentQ}
                                answer={selectedAnswer}
                                onAnswerChange={handleAnswerSelect}
                            />
                        )}

                        {currentQ.type === 'matching' && (
                            <MatchingQuestionComponent
                                question={currentQ}
                                matches={selectedAnswer}
                                onMatchesChange={handleAnswerSelect}
                            />
                        )}

                        <div className="flex justify-end pt-6">
                            <button
                                onClick={() => nextQuestion(quiz)}
                                disabled={!isAnswerReady()}
                                className={`px-6 py-2 rounded-md transition-colors ${!isAnswerReady()
                                    ? 'bg-amber-300 text-amber-500 cursor-not-allowed'
                                    : 'bg-amber-600 text-white hover:bg-amber-700'
                                }`}
                            >
                                {currentQuestion === questions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }


    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–º—ã
    if (currentTopic && currentSection) {
        return (
            <div className="min-h-screen bg-amber-50">
                <div className="container mx-auto px-4 py-8 max-w-4xl">
                    <div className="mb-6">
                        <button
                            onClick={goToSection}
                            className="mb-2 flex items-center text-amber-800 hover:text-amber-900"
                        >
                            <ArrowLeft className="w-4 h-4 mr-2" />
                            –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "{currentSection.title}"
                        </button>
                        <nav className="text-sm text-amber-700">
                            <span onClick={goToHome} className="cursor-pointer hover:text-amber-900">
                                –ì–ª–∞–≤–Ω–∞—è
                            </span>
                            {' > '}
                            <span onClick={goToSection} className="cursor-pointer hover:text-amber-900">
                                {currentSection.title}
                            </span>
                            {' > '}
                            <span>{currentTopic.title}</span>
                        </nav>
                    </div>

                    <article className="bg-amber-100 border border-amber-200 rounded-lg shadow-lg p-6">
                        <div className="mb-6">
                            <Image
                                src={currentTopic.image}
                                alt={currentTopic.title}
                                width={800}
                                height={400}
                                className="w-full h-64 object-cover rounded-lg border-2 border-amber-300"
                            />
                        </div>

                        <div className="prose prose-lg max-w-none">
                            <h1 className="text-3xl font-bold mb-4 text-amber-900">{currentTopic.title}</h1>
                            <div
                                className="text-black-800 leading-relaxed p-6 rounded-lg border border-amber-200 relative overflow-hidden"
                                style={{
                                    background: `url('/images/back.jpg') center/cover no-repeat`,
                                    backgroundAttachment: 'fixed',
                                    backgroundColor: 'rgba(253, 230, 200, 0.85)', // –ª—ë–≥–∫–∏–π –ø–æ–¥—Ç–æ–Ω –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                                    backdropFilter: 'blur(2px)', // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª—ë–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
                                }}
                            >
                                <div className="relative z-10">
                                    <TopicContent topic={currentTopic} />
                                </div>
                            </div>
                        </div>
                    </article>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–æ—Å—Å–∞—Ä–∏—è
    if (currentSection && isGlossaryMode) {
        const renderContent = () => {
            if (glossaryLoading) {
                return <div className="text-center text-amber-700 col-span-full">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è...</div>;
            }

            if (glossaryError || !glossary) {
                return (
                    <div className="col-span-full bg-red-100 border border-red-300 rounded-lg p-6 text-red-700 text-center">
                        <h2 className="text-xl font-bold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–æ—Å—Å–∞—Ä–∏—è</h2>
                        <p>{glossaryError || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≥–ª–æ—Å—Å–∞—Ä–∏—è.'}</p>
                        <p className="text-sm mt-2">–§–∞–π–ª: {currentSection.glossaryFile}</p>
                    </div>
                );
            }

            if (glossary.length === 0) {
                return <div className="text-center text-amber-700 col-span-full">–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤.</div>;
            }

            return glossary.map((term, index) => (
                <div key={index} className="border border-amber-200 rounded-lg p-6 bg-amber-100 hover:bg-amber-200 transition-colors">
                    <h3 className="text-xl font-semibold flex items-center gap-3 mb-3 text-amber-900">
                        <BookOpen className="w-5 h-5 text-amber-700" />
                        {term.term}
                    </h3>
                    <p className="text-amber-800">
                        {term.definition}
                    </p>
                </div>
            ));
        };

        return (
            <div className="min-h-screen bg-amber-50">
                <div className="container mx-auto px-4 py-8 max-w-6xl">
                    <div className="mb-8">
                        <button
                            onClick={exitGlossary}
                            className="mb-4 flex items-center text-amber-800 hover:text-amber-900"
                        >
                            <ArrowLeft className="w-4 h-4 mr-2" />
                            –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É
                        </button>

                        <div className="flex items-center gap-4 mb-6">
                            <div className="p-3 bg-amber-200 rounded-lg">
                                {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                                <Image
                                    src={currentSection.icon}
                                    alt={`${currentSection.title} icon`}
                                    width={32}
                                    height={32}
                                />
                            </div>
                            <div>
                                <h1 className="text-3xl font-bold mb-2 text-amber-900">–ì–ª–æ—Å—Å–∞—Ä–∏–π: {currentSection.title}</h1>
                                <p className="text-amber-700">–°–ª–æ–≤–∞—Ä—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–æ–Ω—è—Ç–∏–π</p>
                            </div>
                        </div>
                    </div>

                    <div className="grid gap-4 md:grid-cols-2">
                        {renderContent()}
                    </div>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ
    if (currentSection) {
        return (
            <div className="min-h-screen bg-amber-50">
                <div className="container mx-auto px-4 py-8 max-w-6xl">
                    <div className="mb-8">
                        <button
                            onClick={goToHome}
                            className="mb-4 flex items-center text-amber-800 hover:text-amber-900"
                        >
                            <ArrowLeft className="w-4 h-4 mr-2" />
                            –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º
                        </button>

                        <div className="flex flex-col gap-6 mb-6">
                            <div className="flex items-center gap-4">
                                <div className="p-3 bg-amber-200 rounded-lg">
                                    {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                                    <Image
                                        src={currentSection.icon}
                                        alt={`${currentSection.title} icon`}
                                        width={32}
                                        height={32}
                                    />
                                </div>
                                <div className="flex-1">
                                    <h1 className="text-3xl font-bold mb-2 text-amber-900">{currentSection.title}</h1>
                                    <p className="text-amber-700">{currentSection.description}</p>
                                </div>
                            </div>

                            <div className="flex gap-3">
                                <button
                                    onClick={showGlossary}
                                    className="px-4 py-2 border border-amber-300 text-amber-800 rounded-md hover:bg-amber-200 flex items-center gap-2 transition-colors"
                                >
                                    <BookOpen className="w-5 h-5" />
                                    –ì–ª–æ—Å—Å–∞—Ä–∏–π
                                </button>
                                <button
                                    onClick={startQuiz}
                                    className="px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700 flex items-center gap-2 transition-colors"
                                >
                                    <Brain className="w-5 h-5" />
                                    –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
                                </button>
                            </div>
                        </div>
                    </div>

                    <div className="grid gap-6 md:grid-cols-2">
                        {currentSection.topics.map((topic) => (
                            <div
                                key={topic.id}
                                className="cursor-pointer border border-amber-200 rounded-lg hover:shadow-lg transition-all duration-200 overflow-hidden bg-amber-100 hover:bg-amber-200"
                                onClick={() => setCurrentTopic(topic)}
                            >
                                <div className="aspect-video relative overflow-hidden">
                                    <Image
                                        src={topic.image}
                                        alt={topic.title}
                                        fill
                                        className="object-cover group-hover:scale-105 transition-transform duration-300"
                                    />
                                    <div className="absolute top-3 right-3 bg-white bg-opacity-90 p-2 rounded-full shadow-sm">
                                        <Book className="w-4 h-4 text-amber-600" />
                                    </div>
                                </div>
                                <div className="p-4">
                                    <h3 className="text-lg font-semibold text-gray-800  leading-tight">
                                        {topic.title}
                                    </h3>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        );
    }

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
    return (
        <div className="min-h-screen bg-amber-50">
            <div className="container mx-auto px-4 py-8 max-w-6xl">
                <div className="text-center mb-12">
                    <h1 className="text-4xl font-bold mb-4 text-amber-900">–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª</h1>
                    <p className="text-amber-700 max-w-2xl mx-auto">
                        –ò–∑—É—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ö—É–±–∞–Ω–∏ –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–π –¥–æ –Ω–æ–≤–µ–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                        –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–∞–∫—Ç—ã.
                    </p>
                </div>

                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-2">
                    {sections.map((section) => {
                        return (
                            <div
                                key={section.id}
                                className="cursor-pointer border border-amber-200 rounded-lg p-6 hover:shadow-lg transition-all duration-200 bg-amber-100 hover:bg-amber-200"
                                onClick={() => setCurrentSection(section)}
                            >
                                <div className="mb-4">
                                    <div className="flex items-center gap-4">
                                        <div className="p-3 bg-amber-200 rounded-lg">
                                            {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                                            <Image
                                                src={section.icon}
                                                alt={`${section.title} icon`}
                                                width={32}
                                                height={32}
                                            />
                                        </div>
                                        <div>
                                            <h3 className="text-xl font-semibold text-amber-900">{section.title}</h3>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <p className="text-amber-800 mb-4">
                                        {section.description}
                                    </p>
                                    <div className="flex items-center justify-between text-sm text-amber-700">
                                        <span>
                                            {section.topics.length} {section.topics.length === 1 ? '—Ç–µ–º–∞' :
                                            section.topics.length < 5 ? '—Ç–µ–º—ã' : '—Ç–µ–º'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}